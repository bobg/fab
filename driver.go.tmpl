// -*- go -*-
package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/bobg/fab"
	"github.com/bobg/fab/sqlite"

	subpkg "x/pkg/{{ .Subpkg }}"
)

func main() {
	{{ range .Targets }}
	{{ if .IsFunc }}
	fab.Register("{{ .Name }}", {{ .Doc }}, subpkg.{{ .Name }}())
	{{ else }}
	fab.Register("{{ .Name }}", {{ .Doc }}, subpkg.{{ .Name }})
	{{ end }}
	{{ end }}

	home, err := os.UserHomeDir()
	if err != nil {
		fatalf("Error getting home dir: %s", err)
	}

	var (
		fabdir  string
		verbose bool
		list    bool
		force   bool
	)
	flag.StringVar(&fabdir, "fab", filepath.Join(home, ".fab"), "directory containing driver binaries and hash DB")
	flag.BoolVar(&verbose, "v", false, "run verbosely")
	flag.BoolVar(&list, "list", false, "list available targets")
	flag.BoolVar(&force, "f", false, "force rebuilding of targets")
	flag.Parse()

	ctx := context.Background()
	ctx = fab.WithVerbose(ctx, verbose)
	ctx = fab.WithForce(ctx, force)

	if err = os.MkdirAll(fabdir, 0755); err != nil {
		fatalf("Error creating %s: %s", fabdir, err)
	}

	dbfile := filepath.Join(fabdir, "hash.db")
	db, err := sqlite.Open(ctx, dbfile, sqlite.Keep(30*24*time.Hour)) // keep db entries for 30 days
	if err != nil {
		fatalf("Error opening %s: %s", dbfile, err)
	}
	defer db.Close()
	ctx = fab.WithHashDB(ctx, db)

	args := flag.Args()
	if len(args) == 0 && !list {
		fmt.Print("Specify one or more of the following targets:\n\n")
		list = true
	}

	if list {
		targetNames := fab.RegistryNames()
		for _, name := range targetNames {
			fmt.Println(name)
			if _, d := fab.RegistryTarget(name); d != "" {
				fmt.Println(d)
			}
		}
		return
	}

	var (
		targets []fab.Target
		unknown []string
	)

	for _, arg := range args {
		if target, _ := fab.RegistryTarget(arg); target != nil {
			targets = append(targets, target)
		} else {
			unknown = append(unknown, arg)
		}
	}

	if len(unknown) > 0 {
		fatalf("Unknown target(s): %s", strings.Join(unknown, " "))
	}

	runner := fab.NewRunner()
	if err := runner.Run(ctx, targets...); err != nil {
		fatalf("Error: %s", err)
	}
}

func fatalf(format string, args ...any) {
	fmt.Printf(format, args...)
	if !strings.HasSuffix(format, "\n") {
		fmt.Println("")
	}
	os.Exit(1)
}
