// -*- go -*-
package main

import (
	"context"
	"errors"
	"flag"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"strings"

	"github.com/bobg/fab"
	_ "github.com/bobg/fab/deps"

	subpkg "x/pkg/{{ .Subpkg }}"
)

func main() {
	var err error

	{{- range .Targets }}
	_, err = fab.RegisterTarget("{{ .Name }}", {{ .Doc }}, subpkg.{{ .Name }})
	if err != nil {
		fmt.Printf("Error registering target {{ .Name }}: %s\n", err)
		os.Exit(1)
	}
	{{- end }}

	if err = fab.ReadYAMLFile(); err != nil && !errors.Is(err, fs.ErrNotExist) {
		fmt.Printf("Error reading YAML file: %s\n", err)
		os.Exit(1)
	}

	cacheDir, err := os.UserCacheDir()
	if err != nil {
		home, err := os.UserHomeDir()
		if err != nil {
			fmt.Printf("Error getting home dir: %s\n", err)
			os.Exit(1)
		}
		cacheDir = filepath.Join(home, ".cache")
	}

	var (
		fabdir  string
		verbose bool
		list    bool
		force   bool
	)
	flag.StringVar(&fabdir, "fab", filepath.Join(cacheDir, "fab"), "directory containing driver binaries and hash DB")
	flag.BoolVar(&verbose, "v", false, "run verbosely")
	flag.BoolVar(&list, "list", false, "list available targets")
	flag.BoolVar(&force, "f", false, "force rebuilding of targets")
	flag.Parse()

	ctx := context.Background()
	ctx = fab.WithVerbose(ctx, verbose)
	ctx = fab.WithForce(ctx, force)

	db, err := fab.OpenHashDB(ctx, fabdir)
	if err != nil {
		fatalf("Error opening hash DB: %s", err)
	}
	defer db.Close()
	ctx = fab.WithHashDB(ctx, db)

	args := flag.Args()
	if len(args) == 0 && !list {
		fmt.Print("Specify one or more of the following targets:\n\n")
		list = true
	}

	if list {
		fab.ListTargets()
		return
	}

	targets, err := fab.ParseArgs(args)
	if err != nil {
		fatalf("Parsing args: %s", err)
	}

	runner := fab.NewRunner()
	if err := runner.Run(ctx, targets...); err != nil {
		fatalf("Error: %s", err)
	}
}

func fatalf(format string, args ...any) {
	fmt.Printf(format, args...)
	if !strings.HasSuffix(format, "\n") {
		fmt.Println("")
	}
	os.Exit(1)
}
