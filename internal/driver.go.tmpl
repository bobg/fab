// -*- go -*-
package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"reflect"
	"strings"

	"github.com/bobg/fab"
	"go.uber.org/multierr"

	subpkg "x/pkg/{{ .Subpkg }}"
)

func main() {
	index := map[string]fab.Target{
		{{ range .Targets }}
		"{{ .SnakeName }}": subpkg.{{ .Name }},
		{{ end }}
	}

	var (
		names = make(map[uintptr]string)
		v     reflect.Value
	)
	{{ range .Targets }}
	v = reflect.ValueOf(subpkg.{{ .Name }})
	if v.Kind() == reflect.Pointer {
		names[v.Pointer()] = "{{ .Name }}"
	}
	{{ end }}

	var verbose bool

	flag.BoolVar(&verbose, "v", false, "run verbosely")
	flag.Parse()
	if flag.NArg() < 2 {
		log.Fatalf("Got %d args; usage is [-v] DIR OUTFILE [TARGET...]", flag.NArg())
	}
	dir, outfile := flag.Arg(0), flag.Arg(1)
	args := flag.Args()[2:]
	if len(args) == 0 {
		if _, ok := index["default"]; !ok {
			log.Fatal("No targets given and no default target defined")
		}
		args = []string{"default"}
	}

	f, err := os.OpenFile(outfile, os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0644)
	if err != nil {
		log.Fatalf("Opening %s for writing: %s", outfile, err)
	}
	defer f.Close()
	enc := json.NewEncoder(f)
	enc.SetIndent("", "  ")

	ctx := context.Background()
	ctx = fab.WithVerbose(ctx, verbose)
	ctx = fab.WithDir(ctx, dir)
	ctx = fab.WithNames(ctx, names)

	var (
		targets []fab.Target
		unknown []string
	)

	for _, arg := range args {
		if target, ok := index[arg]; ok {
			targets = append(targets, target)
		} else {
			unknown = append(unknown, arg)
		}
	}

	var errs []error

	if len(unknown) > 0 {
		errs = append(errs, fmt.Errorf("unknown target(s): %s", strings.Join(unknown, " ")))
	} else {
		runner := fab.NewRunner()
		err := runner.Run(ctx, targets...)
		if err != nil {
			errs = multierr.Errors(err)
		}
	}

	output := []string{} // n.b. not nil, which JSON-encodes as "null"
	for _, e := range errs {
		output = append(output, e.Error())
	}
	enc.Encode(output)
}
