// -*- go -*-
package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"strings"

	"github.com/bobg/fab"
	"go.uber.org/multierr"

	subpkg "x/pkg/{{ .Subpkg }}"
)

func main() {
	var (
		verbose bool
		dir     string
	)

	flag.BoolVar(&verbose, "v", false, "run verbosely")
	flag.StringVar(&dir, "d", "", "directory in which to run")
	flag.Parse()

	ctx := context.Background()
	ctx = fab.WithVerbose(ctx, verbose)
	ctx = fab.WithDir(ctx, dir)

	var (
		targets []fab.Target
		unknown []string
	)

	for _, arg := range flag.Args() {
		if target, ok := index[arg]; ok {
			targets = append(targets, target)
		} else {
			unknown = append(unknown, arg)
		}
	}

	output := []string{} // n.b. not nil, which JSON-encodes as "null"

	if len(unknown) > 0 {
		output = append(output, fmt.Sprintf("Unknown target(s): %s", strings.Join(unknown, " ")))
	} else {
		runner := fab.NewRunner()
		err := runner.Run(ctx, targets...)
		if err != nil {
			errs := multierr.Errors(err)
			for _, e := range errs {
				output = append(output, e.Error())
			}
		}
	}

	enc := json.NewEncoder(os.Stdout)
	enc.SetIndent("", "  ")
	enc.Encode(output)
}

var index = map[string]fab.Target{
	{{ range .Targets }}
	"{{ .SnakeName }}": subpkg.{{ .Name }},
	{{ end }}
}
